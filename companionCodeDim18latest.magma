numRealRootsSquareFree:=function(p)
	P<x>:=PolynomialRing(Rationals());
	SS:=[p,Derivative(p)];
	while Degree(SS[#SS]) gt 0 do
		i:=#SS;
		SS cat:=[-(SS[i-1] mod SS[i])];
	end while;
	TT:=[Reverse(Coefficients(SS[i]))[1]*x^(#SS-i) : i in [1..#SS-1]] cat [SS[#SS]];
	infBefore:=Evaluate(TT[1],1);
	minfBefore:=Evaluate(TT[1],-1);
	b1:=infBefore gt 0;
	b2:=minfBefore gt 0;
	count1:=0;
	count2:=0;
	for i in [2..#TT] do
		infAfter:=Evaluate(TT[i],1);
		minfAfter:=Evaluate(TT[i],-1);
		c1:=infAfter gt 0;
		c2:=minfAfter gt 0;
		if b1 ne c1 then
			count1+:=1;
		end if;
		if b2 ne c2 then
			count2+:=1;
		end if;
		infBefore:=infAfter;
		minfBefore:=minfAfter;
		b1:=c1;
		b2:=c2;
	end for;
	return count2-count1;
end function;

numRealRoots:=function(p)
	P<x>:=PolynomialRing(Rationals());
	pp:=P!p;
	if Degree(pp) lt 1 then
		return 0;
	end if;
	g := GCD(pp,Derivative(pp));
	if g eq 1 then
		return numRealRootsSquareFree(pp);
	end if;
	return $$(P!(pp/g)) + $$(g);
end function;

// McKee-Smyth algorithm
getCoeffs:=function(clist,dv,nn,d)
	P<x>:=PolynomialRing(Rationals());
	Q<xx,y>:=PolynomialRing(Rationals(),2);
	f:=P!Polynomial(Reverse(clist));
	f*:=x^(d-nn);
	for j in [1..d-nn-1] do
		f:=Derivative(f);
		f/:=j;
	end for;
	g:=Q!Evaluate(f,xx)+y;
	g:=P!UnivariatePolynomial(Discriminant(g,xx));
	roots:=Roots(g,RealField(1000));
	groots:=[];
	for i in [1..#roots] do
		groots cat:=[roots[i][1] : j in [1..roots[i][2]]];
	end for;
	if #groots ne Degree(g) then
		print clist;
		print dv;
		print nn;
		print "possible error";
	end if;
	// print roots;
	pos:=Floor(nn/2);
	low:=Ceiling(groots[pos]);
	high:=Floor(groots[pos+1]);
	// print low, high;
	ss:=[];
	for j in [Ceiling(low/dv)..Floor(high/dv)+1] do
		if numRealRoots(f+dv*j) eq nn+1 then
			ss cat:=[clist cat [dv*j]];
		end if;
	end for;
	return ss;
end function;

getCoeffsType2:=function(d,clist)
	P<x>:=PolynomialRing(Rationals());
	n:=#clist-1;
	coeffLists:=[[] : i in [1..d-n+1]];
	coeffLists[1]:=[clist];
	for i in [2..d-n+1] do
		nn:=#coeffLists[i-1][1]-1;
		for j in [1..#coeffLists[i-1]] do
			coeffLists[i] cat:=getCoeffs(coeffLists[i-1][j],2^(nn+1),nn,d);
		end for;
	end for;
	return coeffLists[d-n+1];
end function;

getCoeffsWeaklyType2:=function(d,clist)
	P<x>:=PolynomialRing(Rationals());
	n:=#clist-1;
	coeffLists:=[[] : i in [1..d-n+1]];
	coeffLists[1]:=[clist];
	for i in [2..d-n+1] do
		nn:=#coeffLists[i-1][1]-1;
		for j in [1..#coeffLists[i-1]] do
			coeffLists[i] cat:=getCoeffs(coeffLists[i-1][j],2^nn,nn,d);
		end for;
	end for;
	return coeffLists[d-n+1];
end function;

// input: ff and gg are real-rooted polynomials, ff is degree one more than gg
// output: True iff the roots of gg interlace with those of ff
interlace:=function(ff,gg)
	P<x>:=PolynomialRing(Rationals());
	f:=P!ff;
	g:=P!gg;
	d:=GCD(f,g); //divide by GCD so that there are no common zeros
	f:=P!(f/d);
	g:=P!(g/d);
	roots:=Roots(g,RealField(1000));
	r:=[];
	for i in [1..#roots] do
		r cat:=[roots[i][1] : j in [1..roots[i][2]]];
	end for;
	rB2S:=Reverse(r);
	for i in [1..#rB2S] do
		if i mod 2 eq 1 then
			if Evaluate(f,rB2S[i]) gt 0 then
				return false;
			end if;
		end if;
		if i mod 2 eq 0 then
			if Evaluate(f,rB2S[i]) lt 0 then
				return false;
			end if;
		end if;
	end for;
	return true;
end function;

listInterlaceReduce:=function(l,f)
	P<x>:=PolynomialRing(Rationals());
	ll:=[];
	for i in [1..#l] do
		p:=P!Polynomial(Reverse(l[i]));
		if interlace(f,p) then
			ll cat:=[l[i]];
		end if;
	end for;
	return ll;
end function;

isType2:=function(f)
	P<x>:=PolynomialRing(Integers());
	v:=Reverse(Coefficients(P!f));
	for i in [1..#v] do
		if v[i] mod 2^(i-1) ne 0 then
			return false;
		end if;
	end for;
	return true;
end function;

listPowerReduce:=function(l,f)
	P<x>:=PolynomialRing(Rationals());
	ll:=[];
	for i in [1..#l] do
		p:=P!Polynomial(Reverse(l[i]));
		pp:=(P!f)*p;
		if isType2(Evaluate(pp,x-1)) then
			ll cat:=[l[i]];
		end if;
	end for;
	return ll;
end function;

randomSeidel:=function(n)
	m:=Matrix(Integers(),n,n,[0 : i in [1..n^2]]);
	for i in [1..n] do
		for j in [i+1..n] do
			r:=Random({0,1});
			r:=1-2*r;
			m[i,j]:=r;
			m[j,i]:=r;
		end for;
	end for;
	return m;
end function;

SeidelCharPolysMod:=function(n,k)
	ll:={};
	P<x>:=PolynomialRing(Integers(2^k));
	if n mod 2 eq 1 then
		ub:=2^(Binomial(k-2,2)+1);
	else
		ub:=2^Binomial(k-2,2);
	end if;
	while #ll lt ub do
		m:=randomSeidel(n);
		Include(~ll,P!CharacteristicPolynomial(m));
	end while;
	return ll;
end function;

listPowerReduceOdd:=function(l,f,n,k)
	P<x>:=PolynomialRing(Integers(2^k));
	ll:=[];
	ssc:=SeidelCharPolysMod(n,k);
	for i in [1..#l] do
		p:=P!Polynomial(Reverse(l[i]));
		pp:=(P!f)*p;
		if pp in ssc then
			ll cat:=[l[i]];
		end if;
	end for;
	return ll;
end function;

// use precomputed char poly classes
listPowerReduceOddPreComp:=function(l,f,k,ssc)
	P<x>:=PolynomialRing(Integers(2^k));
	ll:=[];
	for i in [1..#l] do
		p:=P!Polynomial(Reverse(l[i]));
		pp:=(P!f)*p;
		if pp in ssc then
			ll cat:=[l[i]];
		end if;
	end for;
	return ll;
end function;

isAtLeastZero:=function(l)
	d:=Dimension(Parent(l));
	for i in [1..d] do
		if l[i] lt 0 then
			return false;
		end if;
	end for;
	return true;
end function;

getInterlacingCharacteristicPolynomialsEvenn:=function(mp,qp,n)
	P<x>:=PolynomialRing(Rationals());
	d:=Degree(mp)-1;
	aa:=Reverse(Coefficients(mp));
	q:=x^d+aa[2]*x^(d-1)+(aa[3]+n)*x^(d-2);
	qq:=Evaluate(q,x-1);
	bb:=Reverse(Coefficients(qq));
	ll2:=getCoeffsType2(d,[1,bb[2],bb[3]]);
	llshift2:=[P!(Evaluate(Polynomial(Reverse(l)),x+1)) : l in ll2];
	lllist2:=[Reverse(Coefficients(l)) : l in llshift2];
	llred2:=listInterlaceReduce(lllist2,mp);
	return listPowerReduce(llred2,qp);
end function;

getInterlacingCharacteristicPolynomialsOddn:=function(mp,qp,n,k)
	P<x>:=PolynomialRing(Rationals());
	d:=Degree(mp)-1;
	aa:=Reverse(Coefficients(mp));
	q:=x^d+aa[2]*x^(d-1)+(aa[3]+n)*x^(d-2);
	qq:=Evaluate(q,x-1);
	bb:=Reverse(Coefficients(qq));
	ll2:=getCoeffsWeaklyType2(d,[1,bb[2],bb[3]]);
	llshift2:=[P!(Evaluate(Polynomial(Reverse(l)),x+1)) : l in ll2];
	lllist2:=[Reverse(Coefficients(l)) : l in llshift2];
	llred2:=listInterlaceReduce(lllist2,mp);
	return listPowerReduceOdd(llred2,qp,n,k);
end function;

getInterlacingCharacteristicPolynomialsOddnPreComp:=function(mp,qp,n,k,ssc)
	P<x>:=PolynomialRing(Rationals());
	d:=Degree(mp)-1;
	aa:=Reverse(Coefficients(mp));
	q:=x^d+aa[2]*x^(d-1)+(aa[3]+n)*x^(d-2);
	qq:=Evaluate(q,x-1);
	bb:=Reverse(Coefficients(qq));
	ll2:=getCoeffsWeaklyType2(d,[1,bb[2],bb[3]]);
	llshift2:=[P!(Evaluate(Polynomial(Reverse(l)),x+1)) : l in ll2];
	lllist2:=[Reverse(Coefficients(l)) : l in llshift2];
	llred2:=listInterlaceReduce(lllist2,mp);
	return listPowerReduceOddPreComp(llred2,qp,k,ssc);
end function;

// ssc497:=SeidelCharPolysMod(49,7);

Lemma32Polys:=function()
	P<x>:=PolynomialRing(Rationals());
	ll2:=getCoeffsType2(12,[1,-156,11136]);
	llshift2:=[Evaluate(P!Polynomial(Reverse(l)), x+1) : l in ll2];
	lllist2:=[Reverse(Coefficients(l)) : l in llshift2];
	return listPowerReduce(lllist2,(x+5)^42*(x-11)^6);
end function;

all44polys:=[
    [ 1, -144, 9486, -378040, 10152003, -193550016, 2686477332, -27354605520, 
    202806765975, -1067762976368, 3789634713150, -8141116454328, 8006089846469 
    ],
    [ 1, -144, 9486, -378032, 10151163, -193510848, 2685412820, -27336021504, 
    202590644487, -1066088684848, 3781302695742, -8116947208656, 7974952890333 
    ],
    [ 1, -144, 9486, -378032, 10151179, -193512320, 2685472020, -27337380928, 
    202610140007, -1066267486064, 3782326862974, -8120297069456, 7979743191277 
    ],
    [ 1, -144, 9486, -378032, 10151195, -193513760, 2685528692, -27338654816, 
    202628028647, -1066428185680, 3783228748574, -8123188257008, 7983796522845 
    ],
    [ 1, -144, 9486, -378024, 10150323, -193471680, 2684348308, -27317437488, 
    202374522999, -1064414393328, 3772970678334, -8092777962984, 7943815934197 
    ],
    [ 1, -144, 9486, -378024, 10150339, -193473152, 2684407508, -27318796912, 
    202394018519, -1064593194544, 3773994845566, -8096127823784, 7948606235141 
    ],
    [ 1, -144, 9486, -378024, 10150355, -193474624, 2684466708, -27320156336, 
    202413514039, -1064771995760, 3775019012798, -8099477684584, 7953396536085 
    ],
    [ 1, -144, 9486, -378024, 10150371, -193476096, 2684525844, -27321511536, 
    202432893399, -1064949093296, 3776029124670, -8102765701800, 7958073457125 
    ],
    [ 1, -144, 9486, -378016, 10149467, -193431008, 2683222004, -27297404160, 
    202137175911, -1062541340432, 3763476453022, -8064728969440, 7907017713309 
    ],
    [ 1, -144, 9486, -378016, 10149483, -193432512, 2683283796, -27298853472, 
    202158401511, -1062740101808, 3764638660926, -8068608717312, 7912678978061 
    ],
    [ 1, -144, 9486, -378016, 10149499, -193434016, 2683345588, -27300302784, 
    202179627111, -1062938863184, 3765800868830, -8072488465184, 7918340242813 
    ],
    [ 1, -144, 9486, -378016, 10149499, -193433984, 2683342996, -27300212896, 
    202177897031, -1062918903024, 3765662828158, -8071958578112, 7917469279005 
    ],
    [ 1, -144, 9486, -378016, 10149515, -193435488, 2683404724, -27301657856, 
    202198999431, -1063115805840, 3766809277022, -8075767112160, 7922996549325 
    ],
    [ 1, -144, 9486, -378008, 10148611, -193390336, 2682095700, -27277370832, 
    201899828823, -1060668287536, 3753982227710, -8036679975896, 7870219492421 
    ],
    [ 1, -144, 9486, -378008, 10148627, -193391872, 2682160148, -27278914512, 
    201922914999, -1060889033776, 3755300124862, -8041171557848, 7876910078037 
    ],
    [ 1, -144, 9486, -378008, 10148627, -193391840, 2682157492, -27278820144, 
    201921054423, -1060867048912, 3755144435614, -8040559723768, 7875880757173 
    ],
    [ 1, -144, 9486, -378008, 10148643, -193393376, 2682221940, -27280363824, 
    201944140599, -1061087795152, 3756462332766, -8045051305720, 7882571342789 
    ],
    [ 1, -144, 9486, -378008, 10148643, -193393344, 2682219284, -27280269456, 
    201942280023, -1061065810288, 3756306643518, -8044439471640, 7881542021925 
    ],
    [ 1, -144, 9486, -378008, 10148659, -193394880, 2682283668, -27281808656, 
    201965235703, -1061284531824, 3757606892094, -8048849106584, 7888074250485 
    ],
    [ 1, -144, 9486, -378000, 10147755, -193349664, 2680969396, -27257337504, 
    201662481735, -1058795234640, 3744488002398, -8008630982352, 7833421271533 
    ],
    [ 1, -144, 9486, -378000, 10147771, -193351232, 2681036564, -27258980160, 
    201687566535, -1059040168368, 3745981329662, -8013828627376, 7841328327261 
    ],
    [ 1, -144, 9486, -378000, 10147771, -193351200, 2681033844, -27258881184, 
    201685567911, -1059015980880, 3745805899550, -8013122564304, 7840111857149 
    ],
    [ 1, -144, 9486, -378000, 10147771, -193351168, 2681031188, -27258786816, 
    201683707335, -1058993996016, 3745650210302, -8012510730224, 7839082536285 
    ],
    [ 1, -144, 9486, -378000, 10147787, -193352736, 2681098292, -27260424864, 
    201708654087, -1059236727120, 3747123796702, -8017614146256, 7846802442765 
    ],
    [ 1, -144, 9486, -378000, 10147803, -193354272, 2681162676, -27261963936, 
    201731602215, -1059455270736, 3748421952990, -8022011499216, 7853305879133 
    ],
    [ 1, -144, 9486, -377992, 10146883, -193307456, 2679778644, -27235760496, 
    201402048471, -1056701435504, 3733675879934, -7976090406856, 7789932465029 
    ],
    [ 1, -144, 9486, -377992, 10146899, -193309024, 2679845812, -27237403152, 
    201427133271, -1056946369232, 3735169207198, -7981288051880, 7797839520757 
    ],
    [ 1, -144, 9486, -377992, 10146899, -193308992, 2679843092, -27237304176, 
    201425134647, -1056922181744, 3734993777086, -7980581988808, 7796623050645 
    ],
    [ 1, -144, 9486, -377992, 10146915, -193310592, 2679912980, -27239045808, 
    201452218071, -1057191302960, 3736662534462, -7986485696904, 7805746576485 
    ],
    [ 1, -144, 9486, -377992, 10146915, -193310560, 2679910260, -27238946832, 
    201450219447, -1057167115472, 3736487104350, -7985779633832, 7804530106373 
    ],
    [ 1, -144, 9486, -377992, 10146931, -193312128, 2679977364, -27240584752, 
    201475158391, -1057409656368, 3737958377790, -7990869010696, 7812215985717 
    ],
    [ 1, -144, 9486, -377984, 10146011, -193265248, 2678587892, -27214183488, 
    201141615207, -1054607636368, 3722863757470, -7943549831360, 7746443658525 
    ],
    [ 1, -144, 9486, -377984, 10146027, -193266816, 2678655060, -27215826144, 
    201166700007, -1054852570096, 3724357084734, -7948747476384, 7754350714253 
    ],
    [ 1, -144, 9486, -377984, 10146043, -193268416, 2678725012, -27217572512, 
    201193929287, -1055124084144, 3726047895934, -7954759452640, 7763695416477 
    ],
    [ 1, -144, 9486, -377984, 10146043, -193268384, 2678722228, -27217468800, 
    201191784807, -1055097503824, 3725850411998, -7953945121408, 7762257769981 
    ],
    [ 1, -144, 9486, -377984, 10146059, -193269984, 2678792116, -27219210304, 
    201218860167, -1055366422032, 3727516616798, -7959832800192, 7771341081933 
    ],
    [ 1, -144, 9486, -377976, 10145139, -193223040, 2677397140, -27192606480, 
    200881181943, -1052513837232, 3712051635006, -7911009255864, 7702954852021 
    ],
    [ 1, -144, 9486, -377976, 10145155, -193224640, 2677467092, -27194352848, 
    200908411223, -1052785351280, 3713742446206, -7917021232120, 7712299554245 
    ],
    [ 1, -144, 9486, -377976, 10145171, -193226240, 2677537044, -27196099216, 
    200935640503, -1053056865328, 3715433257406, -7923033208376, 7721644256469 
    ],
    [ 1, -144, 9486, -377976, 10145187, -193227840, 2677606932, -27197840592, 
    200962707543, -1053325567216, 3717096650046, -7928902608120, 7730680042917 
    ],
    [ 1, -144, 9486, -377968, 10144251, -193179264, 2676139220, -27169386816, 
    200595663879, -1050175104368, 3699746185278, -7873271035344, 7651558989789 
    ],
    [ 1, -144, 9486, -377968, 10144267, -193180864, 2676209172, -27171133184, 
    200622893159, -1050446618416, 3701436996478, -7879283011600, 7660903692013 
    ],
    [ 1, -144, 9486, -377968, 10144283, -193182496, 2676281972, -27172988128, 
    200652420839, -1050747308624, 3703349898014, -7886233616560, 7671947431005 
    ],
    [ 1, -144, 9486, -377960, 10143363, -193135488, 2674881300, -27146167152, 
    200310145815, -1047836371504, 3687440735550, -7835532814824, 7600163127557 ]
];

checkLemma32:=procedure()
	P<x>:=PolynomialRing(Rationals());
	print "--- Candidates for char polys corresponding to 60 lines ---";
	print "";
	cand60red:=all44polys;
	print "Candidates for char poly:";
	for i in [1..#cand60red] do
		ff:=P!Polynomial(Reverse(cand60red[i]))*(x+5)^42*(x-11)^6;
		print i, Factorisation(ff);
	end for;
	print "";
	inds:=[i : i in [2..7]] cat [i : i in [9..28]] cat [i : i in [30..36]] cat [i : i in [38..39]] cat [i : i in [41..44]];
	cand60:=[cand60red[inds[i]] : i in [1..39]];
	FarkasCertificates:=[
		[0, 0, 0, 34294, 10143, 1812],
		[-305901333, 0, 0, -29631, -1854, 35],
		[-1458935482, 0, 0, -81026, 9, 0],
		[0, 0, 0, -843, -338],
		[-7692466694472, 0, 0, -458256882, -36586502, -2928267, -235607],
		[0, 0, 0, 0, 370, 171],
		[19949599256, 0, 0, 2370351, 198001, 16971],
		[-311392576602, 0, 0, -31763185, -2280433, -162889],
		[0, 0, 0, 0, 0, -1389, -790],
		[0, 0, 0, 0, -122674, -43601, -8823],
		[0, 0, 0, 0, 420, 199],
		[0, 0, 0, 234708, 62958, 8869],
		[0, 0, 0, 125208, 41635, 8550],
		[0, 0, 0, -24742927, -5579245, -747551, -85438],
		[0, 0, 0, 0, 0, 0, 2249, 1485],
		[-196837694, 0, 0, -55815, -5074],
		[0, 0, 0, -172391, -37294, -2664],
		[0, 0, 0, -2265, -946],
		[0, 0, 0, -34871227, -8914066, -1403713, -190406],
		[0, 0, 0, 0, 0, -176, -103],
		[0, 0, 0, 0, -94177, -32024, -5780],
		[0, 0, 0, 0, -557458, -207778, -43657],
		[0, 0, 0, -415, -169],
		[27648369302, 0, 0, 3643351, 310262, 26593],
		[0, 0, 0, 68304472, 16503986, 2380728, 292487],
		[0, 0, 0, 108251, 29388, 4254],
		[0, 0, 0, -1845487303, -379343200, -48329261, -5293439, -539442],
		[34043665264, 0, 0, 5251934, 519994, 51999],
		[64088824162, 0, 0, 8048870, 611903, 47069],
		[0, 0, 0, 0, 1139, 599],
		[0, 0, 0, 0, -814967, -316527, -68325],
		[0, 0, 0, 0, 0, -1163, -700],
		[0, 0, 0, 0, 248, 129],
		[531003714336, 0, 0, 41982177, 3283852, 255629, 19664],
		[-24681212876, 0, 0, -4267959, -431106, -43111],
		[-6730490844, 0, 0, -798929, -33284, 0],
		[0, 0, 0, 0, 1329, 722],
		[-816690681, 0, 0, -119057, -4880, 14],
		[143620, 0, 0, 253]
		];
		bag:=[];
		ssc597:=SeidelCharPolysMod(59,7);
		for i in [1..#cand60] do
			ff:=P!Polynomial(Reverse(cand60[i]))*(x+5)^42*(x-11)^6;
			gcd:=GCD(ff,Derivative(ff));
		// 	ms:=P!(ff/gcd);
			g:=P!(Derivative(ff)/gcd);
		// 	deg:=Degree(ms);
		// 	f:=ms+59*x^(deg-2);
		// 	coeffs:=Reverse(Coefficients(f));
		// 	gf:=x^(deg-3)*P!(Polynomial([coeffs[3],coeffs[2],coeffs[1]]));
		// 	ggf:=Evaluate(gf,x-1);
		// 	clist:=Reverse(Coefficients(ggf));
			mp:=P!(ff/GCD(ff,Derivative(ff)));
			qp:=P!(ff/mp);
			deg:=Degree(mp);
			n:=Degree(ff);
			print "------- Infeasibility of", Factorisation(ff), "-------";
			print "";
			print "Computing interlacing char polys...";
			tic := Cputime();
			// ll:=getCoeffsWeaklyType2(deg-1,[clist[1],clist[2],clist[3]]);
			// llpol:=[Evaluate(P!Polynomial(Reverse(l)),x+1) : l in ll];
			// ll2:=[Reverse(Coefficients(l)) : l in llpol];
			// // print ll2a[1];
			// // ll2:=listPowerReduceOddPreComp(ll2a,1,5,ssc595);
			bag cat:= [getInterlacingCharacteristicPolynomialsOddnPreComp(mp,qp,59,7,ssc597)];
			tt:=Cputime(tic);
			print "Time taken to compute interlacing char polys:", tt,"seconds";
			print "";
			numrows:=#bag[i];
			m:=Matrix(Rationals(),numrows,deg,[bag[i][j] : j in [1..numrows]]);
			gg:=Vector(Reverse(Coefficients(g)));
			// print gg;
			print "Coefficient matrix A for interlacing char polys";
			print m;
			print "";
			mm:=Vector(Rationals(),FarkasCertificates[i]);
			print "Certificate of infeasibility c:";
			print "c =", mm;
			ac:=mm*Transpose(m);
			print "Ac >= 0:", isAtLeastZero(ac);
			print "Ac =", ac;
			innerprod:=&+[gg[j]*mm[j] : j in [1..deg]];
			print "<g,c> < 0:", innerprod lt 0;
			print "<g,c> =", innerprod;
			print "";
		end for;
end procedure;

checkLemma54MakeTable:=procedure()
	P<x>:=PolynomialRing(Rationals());
	cand49red:=all194polys;
	inds:=[i : i in [2..3]] cat [i : i in [5..5]] cat [i : i in [7..8]] cat [i : i in [11..12]] cat [i : i in [14..14]] cat [i : i in [16..21]] cat [i : i in [23..23]] cat [i : i in [26..29]] cat [i : i in [31..34]] cat [i : i in [36..41]] cat [i : i in [43..51]] cat [i : i in [53..57]] cat [i : i in [59..60]] cat [i : i in [62..70]] cat [i : i in [72..72]] cat [i : i in [74..84]] cat [i : i in [87..88]] cat [i : i in [90..101]] cat [i : i in [103..121]] cat [i : i in [123..126]] cat [i : i in [128..129]] cat [i : i in [131..141]] cat [i : i in [143..156]] cat [i : i in [158..166]] cat [i : i in [168..185]] cat [i : i in [187..193]];
	cand49:=[cand49red[inds[i]] : i in [1..164]];
	bag:=[];
	for i in [1..#cand49] do
		ff:=P!Polynomial(Reverse(cand49[i]))*(x+5)^32*(x-9)^4;
		gcd:=GCD(ff,Derivative(ff));
		ms:=P!(ff/gcd);
		g:=P!(Derivative(ff)/gcd);
		deg:=Degree(ms);
		f:=ms+48*x^(deg-2);
		coeffs:=Reverse(Coefficients(f));
		gf:=x^(deg-3)*P!(Polynomial([coeffs[3],coeffs[2],coeffs[1]]));
		ggf:=Evaluate(gf,x-1);
		clist:=Reverse(Coefficients(ggf));
		tic := Cputime();
		ll:=getCoeffsType2(deg-1,[clist[1],clist[2],clist[3]]);
		llpol:=[Evaluate(P!Polynomial(Reverse(l)),x+1) : l in ll];
		ll2:=[Reverse(Coefficients(l)) : l in llpol];
		bag cat:= [listInterlaceReduce(ll2,ms)];
		tt:=Cputime(tic);
		print "(", i, ",", tt, ")";
	end for;
end procedure;


getInterlacingCharacteristicPolynomialsEvenn:=function(mp,qp,n)
	P<x>:=PolynomialRing(Rationals());
	d:=Degree(mp)-1;
	aa:=Reverse(Coefficients(mp));
	q:=x^d+aa[2]*x^(d-1)+(aa[3]+n)*x^(d-2);
	qq:=Evaluate(q,x-1);
	bb:=Reverse(Coefficients(qq));
	ll2:=getCoeffsType2(d,[1,bb[2],bb[3]]);
	llshift2:=[P!(Evaluate(Polynomial(Reverse(l)),x+1)) : l in ll2];
	lllist2:=[Reverse(Coefficients(l)) : l in llshift2];
	llred2:=listInterlaceReduce(lllist2,mp);
	return listPowerReduce(llred2,qp);
end function;

getInterlacingCharacteristicPolynomialsOddn:=function(mp,qp,n,k)
	P<x>:=PolynomialRing(Rationals());
	d:=Degree(mp)-1;
	aa:=Reverse(Coefficients(mp));
	q:=x^d+aa[2]*x^(d-1)+(aa[3]+n)*x^(d-2);
	qq:=Evaluate(q,x-1);
	bb:=Reverse(Coefficients(qq));
	ll2:=getCoeffsWeaklyType2(d,[1,bb[2],bb[3]]);
	llshift2:=[P!(Evaluate(Polynomial(Reverse(l)),x+1)) : l in ll2];
	lllist2:=[Reverse(Coefficients(l)) : l in llshift2];
	llred2:=listInterlaceReduce(lllist2,mp);
	return listPowerReduceOdd(llred2,qp,n,k);
end function;

//checks compatibility by definition (checking all \pm 1 vectors)
isCompatibleSlow:=function(simpInds,q,froots,sqrts,n)
	print "Checking compatibility the slow way...";
	MinPolys:=[];
	for c in CartesianPower({-1,1},#simpInds-1) do
		chk:=Evaluate(q,froots[simpInds[1]])*sqrts[1]+&+[c[i]*Evaluate(q,froots[simpInds[i+1]])*sqrts[i+1] : i in [1..#simpInds-1]];
		flag2:=true;
		if #MinPolys gt 0 then
			for p in MinPolys do
				if Evaluate(p,chk) eq 0 then
					flag2:=false;
				end if;
			end for;
		end if;
		if flag2 then
			MinPolys cat:=[MinimalPolynomial(chk)];
		end if;
	end for;
	d1S:=Set([p : p in MinPolys | Degree(p) eq 1]);
	if #d1S eq 0 then
		// print "not Seidel-Compatible";
		return false;
	end if;
	if n mod 2 eq 1 then
		for p in d1S do
			if not Coefficients(p)[1] in Integers() then
				continue;
			end if;
			if (Integers()!( Evaluate(q,1) - Evaluate(q,0) ) ) mod 2 eq (Integers()!Coefficients(p)[1]) mod 2 then
				// print "Seidel-Compatible!";
				return true;
			end if;
		end for;
		// print "not Seidel-Compatible";
		return false;
	end if;
	return true;
end function;


//checks compatibility using the observation from the end of Section 4
isCompatibleSplit:=function(fff,f1p,f2p,mpd,xi)
	P<x>:=PolynomialRing(Rationals());
	AC:=AlgebraicClosure();
	PK<z>:=PolynomialRing(AC);
	ggroots:=Roots(fff,AC);
	mults:=Vector(AC,[ggroots[i][2] : i in [1..#ggroots]]);
	froots:=[ggroots[i][1] : i in [1..#ggroots]];
	af1:=Vector(AC,[Evaluate(f1p,froots[i])/Evaluate(mpd,froots[i]) : i in [1..#froots]]);
	af2:=Vector(AC,[Evaluate(f2p,froots[i])/Evaluate(mpd,froots[i]) : i in [1..#froots]]);
	q:=1;
	simpInds:=[];
	for i in [1..#froots] do
		if Evaluate(xi,froots[i]) eq 0 then
			simpInds cat:=[i];
		else
			q*:=(z-froots[i]);
		end if;
	end for;
	sqrts:=[SquareRoot(af2[simpInds[i]]*af1[simpInds[i]]) : i in [1..#simpInds]];
	split:=Floor(#simpInds/2);
	// print simpInds;
	if #simpInds eq 0 then
		print "no simple eigenvalues???";  
	end if; 
	if #simpInds eq 1 then
		if Degree(MinimalPolynomial(Evaluate(q,froots[simpInds[1]])*sqrts[1])) gt 1 then
			return false;
		end if;  
	end if; 
	if #simpInds gt 1 then
		if split eq 1 then
			if not isCompatibleSlow(simpInds,q,froots,sqrts,Degree(fff)) then
				return false;
			end if;
		end if;
		if #simpInds eq 4 then
			split:=1;
			firstHalfMinPolys:=[];
			chk:=Evaluate(q,froots[simpInds[1]])*sqrts[1];
			firstHalfMinPolys:=[MinimalPolynomial(chk)];
			// print [Degree(p) : p in firstHalfMinPolys];
		    // #     second half
			secondHalfMinPolys:=[];
			for c in CartesianPower({-1,1},#simpInds-split-1) do
				chk:=Evaluate(q,froots[simpInds[split+1]])*sqrts[split+1]+&+[c[i]*Evaluate(q,froots[simpInds[i+split+1]])*sqrts[i+split+1] : i in [1..#simpInds-split-1]];
				flag:=true;
				if #secondHalfMinPolys gt 0 then
					for p in secondHalfMinPolys do
						if Evaluate(p,chk) eq 0 then
							flag:=false;
						end if;
					end for;
				end if;
				if flag then
					secondHalfMinPolys cat:=[MinimalPolynomial(chk)];
				end if;
			end for;
			// print [Degree(p) : p in secondHalfMinPolys];
			if Set([Degree(p) : p in firstHalfMinPolys]) meet Set([Degree(p) : p in secondHalfMinPolys]) eq {} then
				// print "polys are not compatible"; 
				return false;
			else
				if not isCompatibleSlow(simpInds,q,froots,sqrts,Degree(fff)) then
					return false;
				end if;
			end if;    
		end if;
		if split ge 2 and #simpInds-split ge 3 then
			// #     first half
			firstHalfMinPolys:=[];
			for c in CartesianPower({-1,1},split-1) do
				chk:=Evaluate(q,froots[simpInds[1]])*sqrts[1]+&+[c[i]*Evaluate(q,froots[simpInds[i+1]])*sqrts[i+1] : i in [1..split-1]];
				flag:=true;
				if #firstHalfMinPolys gt 0 then
					for p in firstHalfMinPolys do
						if Evaluate(p,chk) eq 0 then
							flag:=false;
						end if;
					end for;
				end if;
				if flag then
					firstHalfMinPolys cat:=[MinimalPolynomial(chk)];
				end if;
			end for;
			// print [Degree(p) : p in firstHalfMinPolys];
		    // #     second half
			secondHalfMinPolys:=[];
			for c in CartesianPower({-1,1},#simpInds-split-1) do
				chk:=Evaluate(q,froots[simpInds[split+1]])*sqrts[split+1]+&+[c[i]*Evaluate(q,froots[simpInds[i+split+1]])*sqrts[i+split+1] : i in [1..#simpInds-split-1]];
				flag:=true;
				if #secondHalfMinPolys gt 0 then
					for p in secondHalfMinPolys do
						if Evaluate(p,chk) eq 0 then
							flag:=false;
						end if;
					end for;
				end if;
				if flag then
					secondHalfMinPolys cat:=[MinimalPolynomial(chk)];
				end if;
			end for;
			// print [Degree(p) : p in secondHalfMinPolys];
			if Set([Degree(p) : p in firstHalfMinPolys]) meet Set([Degree(p) : p in secondHalfMinPolys]) eq {} then
				return false;
			else
				if not isCompatibleSlow(simpInds,q,froots,sqrts,Degree(fff)) then
					return false;
				end if;
			end if;
		end if;
	end if;
	return true;
end function;

isCompatibleAux:=function(fff,f1p,f2p,mpd,Facs)
	// SFs:=[];
	print "Checking compatibility by splitting into two groups...";
	for c in CartesianPower({0,1},#Facs) do
		// print c;
		xi:=&*[Facs[i]^c[i] : i in [1..#Facs]];
		if xi eq 1 then
			continue;
		end if;
		print "Checking compatibility with respect to", xi, "...";
		if not isCompatibleSplit(fff,f1p,f2p,mpd,xi) then
			// print "incompatible!", xi;
			return false;
		end if;
	end for;
	return true;
end function;

//check compatibility
isCompatible:=function(fff,f1p,f2p,mpd,minpoly,Facs)
	AC:=AlgebraicClosure();
	PK<z>:=PolynomialRing(AC);
	P<x>:=PolynomialRing(Rationals());
	ggroots:=Roots(fff,AC);

	mults:=Vector(AC,[ggroots[i][2] : i in [1..#ggroots]]);
	froots:=[ggroots[i][1] : i in [1..#ggroots]];
	// froots:=[AC!ffroots[i] : i in [1..#ffroots]];
	fg:=f1p*f2p;
	for xi in Facs do
		proots:=Roots(xi,AC);
		m:=MinimalPolynomial(Evaluate(fg,proots[1][1]));

		// if Degree(xi) eq 1 then
		// 	continue;
		// end if;
		
		if IsIrreducible(Evaluate(m,x^2)) then
			if #GaloisGroup(Evaluate(m,x^2)) gt #GaloisGroup(m) and Degree(fff) mod 2 eq 1 and Degree(m) eq #proots then
			// if d mod SquareFree(Integers()!Resultant(fg,p)) ne 0 then
				q:=minpoly/xi;
				if (Integers()!( Evaluate(q,1) - Evaluate(q,0) ) ) mod 2 eq 1 then
					// print "Seidel-incompatible!", xi;
					return false;
				end if;
			end if;
		else
			// print "compatible for", xi;
			if #Facs eq 1 then
				if Degree(fff) mod 2 eq 0 then
					// print "Seidel-compatible!";
					return true;
				else
					if Degree(m) eq 1 then
						N:=Rationals();
					else
						N<al>:=NumberField(m);
					end if;
					sqm:=MinimalPolynomial(SquareRoot(Evaluate(fg,proots[1][1])));
					q:=minpoly/xi;
					if Integers()!Coefficient(Evaluate(P!Eltseq(Roots(sqm,N)[1][1]),fg) mod xi,Degree(xi)-1) mod 2 eq (Integers()!( Evaluate(q,1) - Evaluate(q,0) ) ) mod 2 then
						// print "Seidel-compatible!";
						return true;
					end if;
				end if;
			end if;
		end if;
	end for;
	print "Fast check is inconclusive....";
	return isCompatibleAux(fff,f1p,f2p,mpd,Facs);
end function;


getCompatiblePolynomials:=function(intPolys,f1,fff,mp)
	P<x>:=PolynomialRing(Rationals());
	// AC:=ac;
	// PK<z>:=PolynomialRing(AC);
	// intPolys:=getInterlacingCharacteristicPolynomials(mp,qp);
	compats:=[];
	mpd:=Derivative(mp);
	f1p:=P!(Polynomial(Reverse(f1)));
	fac:=Factorisation(fff);
	minpoly:=1;
	simpFacs:=[];
	for fc in fac do
		minpoly *:=fc[1];
		if fc[2] eq 1 then
			simpFacs cat:=[fc[1]];
		end if;
	end for;
	// af1:=Vector(AC,[Evaluate(f1p,froots[i])/Evaluate(mpd,froots[i]) : i in [1..#froots]]);
	for i in [1..#intPolys] do
		print i, "/", #intPolys;
		p:=intPolys[i];
		f2p:=P!(Polynomial(Reverse(p)));
		if isCompatible(fff,f1p,f2p,mpd,minpoly,simpFacs) then
			print "is Seidel-compatible!";
			print "";
			compats cat:=[p];
		else
			print "not Seidel-compatible";
			print "";
		end if;
	end for;
	return compats;
end function;

checkPairwiseCompatibility:=function(compatibleSet,fff,mp)
	P<x>:=PolynomialRing(Rationals());
	compats:=[];
	mpd:=Derivative(mp);
	fac:=Factorisation(fff);
	minpoly:=1;
	simpFacs:=[];
	for fc in fac do
		minpoly *:=fc[1];
		if fc[2] eq 1 then
			simpFacs cat:=[fc[1]];
		end if;
	end for;
	for sb in Subsets({1..#compatibleSet},2) do
		osb:=[i : i in sb];
		f1p:=P!(Polynomial(Reverse(compatibleSet[osb[1]])));
		f2p:=P!(Polynomial(Reverse(compatibleSet[osb[2]])));
		// print "checking", osb[1], osb[2];
		if isCompatible(fff,f1p,f2p,mpd,minpoly,simpFacs) then
			// print "is Seidel-compatible!";
		else
			// print "not Seidel-compatible";
			return false;
		end if;
	end for;
	return true;
end function;


isAtLeastZeroInt:=function(l)
	d:=Dimension(Parent(l));
	for i in [1..d] do
		if l[i] lt 0 then
			return false;
		end if;

	end for;
	for i in [1..d] do

		if Denominator(l[i]) gt 1 then
			return false;
		end if;
	end for;
	return true;
end function;

findSols:=function(ps,knl,d)
	sols:=[];
	B:=Basis(knl);
	Bsize:=#B;
	init:=[0 : i in [1..Bsize]];
	bag:={init};
	lastbag:=bag;
	for i in [1..49] do
		newbag:={};
		for j in [1..Bsize] do
			for b in lastbag do
				newb:=b;
				newb[j]+:=1;
				Include(~newbag,newb);
			end for;
		end for;
		bag:=bag join newbag;
		// print i;
		// print newbag;
		lastbag:=newbag;
	end for;
	// print bag;
	for c in bag do
		v:=ps;
		for i in [1..Bsize] do
			v+:= (c[i]-v[i])*B[i];
		end for;

		if isAtLeastZeroInt(ChangeRing(v,Rationals())) then
			// print c;
			sols cat:= [v];
		end if;
	end for;
	return sols;
end function;


printInterlacingConfigs:=function(poly,warr,cert)
	P<x>:=PolynomialRing(Rationals());
	fff:=poly;
	print Factorisation(fff);
	mp:=P!(fff/GCD(fff,Derivative(fff)));
	qp:=P!(fff/mp);
	n:=Degree(fff);
	print "Computing interlacing char polys...";
	tic := Cputime();
	if n mod 2 eq 0 then
		llSeidelred:=getInterlacingCharacteristicPolynomialsOddn(mp,qp,n-1,7);
	else
		llSeidelred:=getInterlacingCharacteristicPolynomialsEvenn(mp,qp,n-1);
	end if;
	toc := Cputime(tic);
	print "Time taken to compute interlacing char polys:", toc,  "seconds";
	print "";
	numrows:=#llSeidelred;
	m:=Matrix(Rationals(),numrows,Degree(mp),[llSeidelred[j] : j in [1..numrows]]);

	print "Number of interlacing polynomials:", numrows;
	print "";
	AC:=AlgebraicClosure();
	PK<z>:=PolynomialRing(AC);
	ggroots:=Roots(fff,AC);

	mults:=Vector(AC,[ggroots[i][2] : i in [1..#ggroots]]);
	froots:=[ggroots[i][1] : i in [1..#ggroots]];

	// print froots;
	fbas:=[PK!(PK!(mp)/(z-r)) : r in froots];
	// print fbas;
	fbaslist:=[Reverse(Coefficients(l)) : l in fbas];

	fbasm:=Matrix(AC,Degree(mp),Degree(mp),[fbaslist[j] : j in [1..Degree(mp)]]);

	bb:=mults*fbasm;
	print "Matrix A corresponding to interlacing polynomials:";
	print m;
	// #submatrix of m without f1
	fWarranted:=warr;
	fWarrantedInd:=Index(llSeidelred,fWarranted);
	fWarrantedRange:=Remove([1..numrows],fWarrantedInd);
	
	mfWarranted:=Submatrix(m,fWarrantedRange,[1..Degree(mp)]);
	print ""; 
	print "Show that f = ", fWarranted, " is warranted"; 
	// print "Matrix A' corresponding to interlacing polynomials without f:";
	// print mfWarranted;
	print ""; 
	// #Farkas certificate
	fc:=Vector(Rationals(),cert);
	print "Certificate of warranty c:";
	print "c = ", fc;
	ac:= fc*Transpose(mfWarranted);
	print "Ac >= 0: ", isAtLeastZero(ac);
	print "Ac = ", ac;
	innerprod:= &+[fc[j]*bb[j] : j in [1..Degree(mp)]];

	print "<g,c> < 0: ", Norm(innerprod) lt 0;

	print "<g,c> = ", innerprod;

	print "--- get polys compatible with f ---";
	compatPolys:=getCompatiblePolynomials(llSeidelred,fWarranted,fff,mp);
	
	print "Polynomials compatible with the warranted poly:";
	print compatPolys;
	// if checkPairwiseCompatibility(compatPolys,fff,mp) then
	// 	print "pairwise compatibility: check";
	// else
	// 	print "failed pairwise compatibility";
	// end if;
	numrows:=#compatPolys;
	m:=Matrix(AC,numrows,Degree(mp),[compatPolys[j] : j in [1..numrows]]);
	// print bb;
	pr,sp:=Solution(m,bb);
	// print pr;
	// print sp;
	print "--- list interlacing configurations ---";
	if Dimension(sp) eq 0 then
		print pr;
		sls:=[];
	else
		sls:=findSols(pr,sp,Degree(mp));
		print " there are", #sls, "interlacing configurations";
		print sls;
	end if;
	return qp, compatPolys, sls;
end function;

checkLemma41:=procedure()
	P<x>:=PolynomialRing(Rationals());
	fff:=(x+5)^42*(x-9)^3*(x-11)^6*(x-13)^9;
	print Factorisation(fff);
	mp:=P!(fff/GCD(fff,Derivative(fff)));
	qp:=P!(fff/mp);
	print "Computing interlacing char polys...";
	tic := Cputime();
	llSeidelred:=getInterlacingCharacteristicPolynomialsOddn(mp,qp,59,5);
	toc := Cputime(tic);
	print "Time taken to compute interlacing char polys:", toc,  "seconds";
	print "";
	numrows:=#llSeidelred;
	m:=Matrix(Rationals(),numrows,Degree(mp),[llSeidelred[j] : j in [1..numrows]]);

	print "Number of interlacing polynomials:", numrows;
	AC:=Rationals();
	PK<z>:=PolynomialRing(AC);
	ggroots:=Roots(fff,AC);

	mults:=Vector(AC,[ggroots[i][2] : i in [1..#ggroots]]);
	froots:=[ggroots[i][1] : i in [1..#ggroots]];

	// print froots;
	fbas:=[PK!(PK!(mp)/(z-r)) : r in froots];
	// print fbas;
	fbaslist:=[Reverse(Coefficients(l)) : l in fbas];

	fbasm:=Matrix(AC,Degree(mp),Degree(mp),[fbaslist[j] : j in [1..Degree(mp)]]);

	bb:=mults*fbasm;
	print "Matrix A corresponding to interlacing polynomials:";
	print m;

	pr,sp:=Solution(m,bb);
	// print pr;
	// print sp;
	print "--- list interlacing configurations ---";
	if Dimension(sp) eq 0 then
		print pr;
		sls:=[];
	else
		sls:=findSols(pr,sp,Degree(mp));
		print " there are", #sls, "interlacing configurations";
		print sls;
	end if;
end procedure;

checkLemma42:=procedure()
	P<x>:=PolynomialRing(Rationals());
	fff:=(x+5)^42*(x-11)^14*(x-13)^3*(x-17);
	print Factorisation(fff);
	mp:=P!(fff/GCD(fff,Derivative(fff)));
	qp:=P!(fff/mp);
	print "Computing interlacing char polys...";
	tic := Cputime();
	llSeidelred:=getInterlacingCharacteristicPolynomialsOddn(mp,qp,59,5);
	toc := Cputime(tic);
	print "Time taken to compute interlacing char polys:", toc,  "seconds";
	print "";
	numrows:=#llSeidelred;
	m:=Matrix(Rationals(),numrows,Degree(mp),[llSeidelred[j] : j in [1..numrows]]);

	print "Number of interlacing polynomials:", numrows;
	AC:=Rationals();
	PK<z>:=PolynomialRing(AC);
	ggroots:=Roots(fff,AC);

	mults:=Vector(AC,[ggroots[i][2] : i in [1..#ggroots]]);
	froots:=[ggroots[i][1] : i in [1..#ggroots]];

	// print froots;
	fbas:=[PK!(PK!(mp)/(z-r)) : r in froots];
	// print fbas;
	fbaslist:=[Reverse(Coefficients(l)) : l in fbas];

	fbasm:=Matrix(AC,Degree(mp),Degree(mp),[fbaslist[j] : j in [1..Degree(mp)]]);

	bb:=mults*fbasm;
	print "Matrix A corresponding to interlacing polynomials:";
	print m;

	pr,sp:=Solution(m,bb);
	// print pr;
	// print sp;
	print "--- list interlacing configurations ---";
	if Dimension(sp) eq 0 then
		print pr;
		sls:=[];
	else
		sls:=findSols(pr,sp,Degree(mp));
		print " there are", #sls, "interlacing configurations";
		print sls;
	end if;
	
	ff:=P!Polynomial(Reverse([    1,   -36,   405, -1382]))*qp;
	gcd:=GCD(ff,Derivative(ff));
	ms:=P!(ff/gcd);
	g:=P!(Derivative(ff)/gcd);
	deg:=Degree(ms);
	f:=ms+58*x^(deg-2);
	coeffs:=Reverse(Coefficients(f));
	gf:=x^(deg-3)*P!(Polynomial([coeffs[3],coeffs[2],coeffs[1]]));
	ggf:=Evaluate(gf,x-1);
	clist:=Reverse(Coefficients(ggf));
	print "------- Infeasibility of", Factorisation(ff), "-------";
	print "";
	print "Computing interlacing char polys...";
	tic := Cputime();
	ll:=getCoeffsType2(deg-1,[clist[1],clist[2],clist[3]]);
	llpol:=[Evaluate(P!Polynomial(Reverse(l)),x+1) : l in ll];
	ll2:=[Reverse(Coefficients(l)) : l in llpol];
	llr:=listInterlaceReduce(ll2,ms);
	tt:=Cputime(tic);
	print "Time taken to compute interlacing char polys:", tt,"seconds";
	print "";
	numrows:=#llr;
	m:=Matrix(Rationals(),numrows,deg,[llr[j] : j in [1..numrows]]);
	gg:=Vector(Reverse(Coefficients(g)));
	print "Coefficient matrix A for interlacing char polys";
	print m;
	print "";
	mm:=Vector(Rationals(),[51115513410,0,0,6301221,484710,37285]);
	print "Certificate of infeasibility c:";
	print "c =", mm;
	ac:=mm*Transpose(m);
	print "Ac >= 0:", isAtLeastZero(ac);
	print "Ac =", ac;
	innerprod:=&+[gg[j]*mm[j] : j in [1..deg]];
	print "<g,c> < 0:", innerprod lt 0;
	print "<g,c> =", innerprod;
	print "";
end procedure;

checkLemma43:=procedure()
	P<x>:=PolynomialRing(Rationals());
	fff:=(x+5)^42*(x-9)^2*(x-11)^9*(x-13)^6*(x-15);
	// print Factorisation(fff);
	qp1, compat1, sls:=printInterlacingConfigs(fff,[1,-43,673,-4529,11026],[45911387, 0, 0, 10146, 0]);
	
	ff:=P!Polynomial(Reverse([1,-43,673,-4529,11026]))*qp1;
	gcd:=GCD(ff,Derivative(ff));
	ms:=P!(ff/gcd);
	g:=P!(Derivative(ff)/gcd);
	deg:=Degree(ms);
	f:=ms+58*x^(deg-2);
	coeffs:=Reverse(Coefficients(f));
	gf:=x^(deg-3)*P!(Polynomial([coeffs[3],coeffs[2],coeffs[1]]));
	ggf:=Evaluate(gf,x-1);
	clist:=Reverse(Coefficients(ggf));
	print "------- Infeasibility of", Factorisation(ff), "-------";
	print "";
	print "Computing interlacing char polys...";
	tic := Cputime();
	ll:=getCoeffsType2(deg-1,[clist[1],clist[2],clist[3]]);
	llpol:=[Evaluate(P!Polynomial(Reverse(l)),x+1) : l in ll];
	ll2:=[Reverse(Coefficients(l)) : l in llpol];
	llr:=listInterlaceReduce(ll2,ms);
	tt:=Cputime(tic);
	print "Time taken to compute interlacing char polys:", tt,"seconds";
	print "";
	numrows:=#llr;
	m:=Matrix(Rationals(),numrows,deg,[llr[j] : j in [1..numrows]]);
	gg:=Vector(Reverse(Coefficients(g)));
	print "Coefficient matrix A for interlacing char polys";
	print m;
	print "";
	mm:=Vector(Rationals(),[1132367732240930,0,0,71075114863,6707563763,649903361,64522780,6545789]);
	print "Certificate of infeasibility c:";
	print "c =", mm;
	ac:=mm*Transpose(m);
	print "Ac >= 0:", isAtLeastZero(ac);
	print "Ac =", ac;
	innerprod:=&+[gg[j]*mm[j] : j in [1..deg]];
	print "<g,c> < 0:", innerprod lt 0;
	print "<g,c> =", innerprod;
	print "";
end procedure;

// checkLemma43:=procedure()
// 	P<x>:=PolynomialRing(Rationals());
// 	fff:=(x+5)^42*(x-9)^2*(x-11)^9*(x-13)^6*(x-15);
// 	print Factorisation(fff);
// 	mp:=P!(fff/GCD(fff,Derivative(fff)));
// 	qp:=P!(fff/mp);
// 	print "Computing interlacing char polys...";
// 	tic := Cputime();
// 	llSeidelred:=getInterlacingCharacteristicPolynomialsOddn(mp,qp,59,7);
// 	toc := Cputime(tic);
// 	print "Time taken to compute interlacing char polys:", toc,  "seconds";
// 	print "";
// 	numrows:=#llSeidelred;
//
// 	print "Number of interlacing polynomials:", numrows;
// 	AC:=AlgebraicClosure();
// 	PK<z>:=PolynomialRing(AC);
// 	ggroots:=Roots(fff,AC);
// 	m:=Matrix(AC,numrows,Degree(mp),[llSeidelred[j] : j in [1..numrows]]);
//
// 	mults:=Vector(AC,[ggroots[i][2] : i in [1..#ggroots]]);
// 	froots:=[ggroots[i][1] : i in [1..#ggroots]];
//
// 	// print froots;
// 	fbas:=[PK!(PK!(mp)/(z-r)) : r in froots];
// 	// print fbas;
// 	fbaslist:=[Reverse(Coefficients(l)) : l in fbas];
//
// 	fbasm:=Matrix(AC,Degree(mp),Degree(mp),[fbaslist[j] : j in [1..Degree(mp)]]);
//
// 	bb:=mults*fbasm;
// 	print "Matrix A corresponding to interlacing polynomials:";
// 	print m;
//
// 	pr,sp:=Solution(m,bb);
// 	// print pr;
// 	// print sp;
// 	print "--- list interlacing configurations ---";
// 	if Dimension(sp) eq 0 then
// 		print pr;
// 		sls:=[];
// 	else
// 		sls:=findSols(pr,sp,Degree(mp));
// 		print " there are", #sls, "interlacing configurations";
// 		print sls;
// 	end if;
// end procedure;

checkLemma44:=procedure()
	P<x>:=PolynomialRing(Rationals());
	qp1, compat1, sls:=printInterlacingConfigs((x+5)^42*(x-11)^10*(x-13)^6*(x^2-22*x+109),[1,-41,609,-3871,8886],[16485427, 0, 0, 0, -1859]);
end procedure;
